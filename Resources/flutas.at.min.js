var at = {};
at.AddCodeCopy = async function () {
  // 获取所有代码块元素
  const codeBlocks = document.querySelectorAll("pre");
  let CodeBlk = aluk('.copy-button');
  if (CodeBlk != null) {
    await CodeBlk.RemoveX();
  }
  if (codeBlocks.length > 0) {
    await codeBlocks.forEach((codeBlock, index) => {
      // 创建复制按钮元素
      const copyButton = document.createElement("span");
      copyButton.classList.add("copy-button");
      copyButton.textContent = '复制代码';
      // 为按钮添加点击事件监听器
      copyButton.addEventListener("click", () => {
        // 获取代码内容
        copyButton.textContent = '';
        const codeContent = codeBlock.querySelector("code").innerText;
        // 创建临时textarea元素
        const textarea = document.createElement("textarea");
        textarea.value = codeContent;
        document.body.appendChild(textarea);
        // 选中textarea内容
        SureCopy = true; //临时允许复制
        textarea.select();
        textarea.setSelectionRange(0, 99999);

        // 复制内容到剪贴板
        document.execCommand("copy");
        copyButton.textContent = copyButton.parentElement.childNodes[0].className.split('-')[1].replace(/hljs/g, '').replace(/language/g, '') + ' 复制成功';
        // 删除临时元素
        document.body.removeChild(textarea);
        setTimeout(() => {
          copyButton.textContent = copyButton.parentElement.childNodes[0].className.split('-')[1].replace(/hljs/g, '').replace(/language/g, '') + ' 复制代码';
        }, 1500);
      });

      codeBlock.appendChild(copyButton);
      copyButton.textContent = copyButton.parentElement.childNodes[0].className.split('-')[1].replace(/hljs/g, '').replace(/language/g, '') + ' 复制代码';
    });
  }
}

var href = {};

href.progressbar = `
<style>
    #progress-bar {
      width: 100%;
      background-color: #f1f1f1;
      height: 10px;
    }

    #progress-bar-inner {
      width: 0;
      height: 100%;
      background-color: #4CAF50;
    }
  </style>

  `;
href.divprogress = `
  <div id="progress-bar">
    <div id="progress-bar-inner"></div>
  </div>`;

href.startLoading = function (event) {
  event.preventDefault();
  var progressBar = document.getElementById('progress-bar-inner');
  progressBar.style.width = '0%';

  var xhr = new XMLHttpRequest();
  xhr.open('GET', event.target.href, true);

  xhr.onloadstart = function () {
    progressBar.style.width = '0%';
  };

  xhr.onprogress = function (event) {
    if (event.lengthComputable) {
      var percentComplete = (event.loaded / event.total) * 100;
      progressBar.style.width = percentComplete + '%';
    }
  };

  xhr.onloadend = function () {
    progressBar.style.width = '100%';
    window.location.href = event.target.href;
  };

  xhr.send();
}
function linka(e) {
  this.document.head.innerHTML += href.progressbar;
  this.document.body.innerHTML += href.divprogress;
  let s = aluk("a");
  if(s.length > 0) {
    s.forEach(element => {
      if (element.href != null && element.href != "" && element.href != undefined) {
        href.addEventListener('click', function (event) {
          href.startLoading(event);
        })
      }
    });
  }
}
window.addEventListener("load", linka)
